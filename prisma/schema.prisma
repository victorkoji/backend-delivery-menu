generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id      Int    @id @default(autoincrement())
  city    String
  state   String
  country String
  cep     Int
  number  Int

  user_created    User @relation(name: "UserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "UserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User[]

  Restaurant Restaurant[]

  @@map("address")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  email       String    @unique
  password    String
  dt_birthday DateTime?
  cpf         String    @db.VarChar(255)

  address    Address? @relation(fields: [address_id], references: [id])
  address_id Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_user_created Product[] @relation("UserCreated")
  product_user_updated Product[] @relation("UserUpdated")

  restaurant_user_created Restaurant[] @relation("UserCreated")
  restaurant_user_updated Restaurant[] @relation("UserUpdated")

  category_user_created RestaurantCategory[] @relation("UserCreated")
  category_user_updated RestaurantCategory[] @relation("UserUpdated")

  address_user_created Address[] @relation("UserCreated")
  address_user_updated Address[] @relation("UserUpdated")

  product_category_user_created  ProductCategory[] @relation("ProductCategoryUserCreated")
  product_category_user_modified ProductCategory[] @relation("ProductCategoryUserUpdated")

  favorite_restaurant_created FavoriteRestaurant[] @relation("FavoriteRestaurantUserCreated")
  favorite_restaurant_updated FavoriteRestaurant[] @relation("FavoriteRestaurantUserUpdated")

  favorite_product_created FavoriteProduct[] @relation("FavoriteProductUserCreated")
  favorite_product_updated FavoriteProduct[] @relation("FavoriteProductUserUpdated")

  order_created Order[] @relation("FavoriteProductUserCreated")
  order_updated Order[] @relation("FavoriteProductUserUpdated")

  status_created Statu[] @relation("StatusUserCreated")
  status_updated Statu[] @relation("StatusUserUpdated")

  @@map("users")
}

model Restaurant {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String?

  address    Address @relation(fields: [address_id], references: [id])
  address_id Int

  restaurant_category    RestaurantCategory @relation(fields: [restaurant_category_id], references: [id])
  restaurant_category_id Int

  user_created    User @relation(name: "UserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "UserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product             Product[]
  favorite_restaurant FavoriteRestaurant[]

  @@map("restaurants")
}

model ProductCategory {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  order Int

  user_created    User      @relation(name: "ProductCategoryUserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User      @relation(name: "ProductCategoryUserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int
  product         Product[]

  @@map("product_categories")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String?
  price       Float   @db.Float
  order       Int
  highlight   Boolean

  restaurant             Restaurant         @relation(fields: [restaurant_id], references: [id])
  restaurant_id          Int
  restaurant_category    RestaurantCategory @relation(fields: [restaurant_category_id], references: [id])
  restaurant_category_id Int

  user_created    User @relation(name: "UserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "UserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  product_category    ProductCategory @relation(fields: [product_category_id], references: [id])
  product_category_id Int

  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  favorite_product FavoriteProduct[]

  @@map("products")
}

model RestaurantCategory {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  order Int?

  user_created    User @relation(name: "UserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "UserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product    Product[]
  restaurant Restaurant[]

  @@map("restaurant_categories")
}

model FavoriteRestaurant {
  id            Int        @id @default(autoincrement())
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int

  user_created    User @relation(name: "FavoriteRestaurantUserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "FavoriteRestaurantUserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  @@map("favorite_restaurants")
}

model FavoriteProduct {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int

  user_created    User @relation(name: "FavoriteProductUserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "FavoriteProductUserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  @@map("favorite_products")
}

model Statu {
  id   Int    @id @default(autoincrement())
  name String

  user_created    User    @relation(name: "StatusUserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User    @relation(name: "StatusUserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int
  Order           Order[]

  @@map("status")
}

model Order {
  id          Int     @id @default(autoincrement())
  description String
  price       Float   @db.Float
  highlight   Boolean

  user_created    User @relation(name: "FavoriteProductUserCreated", fields: [user_created_id], references: [id])
  user_created_id Int
  user_updated    User @relation(name: "FavoriteProductUserUpdated", fields: [user_updated_id], references: [id])
  user_updated_id Int

  status  Statu @relation(fields: [statuId], references: [id])
  statuId Int

  @@map("orders")
}
